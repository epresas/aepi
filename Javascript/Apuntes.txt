Correo  profesor: german.alvarez@asociacionaepi.es
5 pts - Ejercicios practicos: Asignados jueves entregados martes
5 pts - Proyecto final

Donde icluir etiqueta script: Final de body -->
problemas de carga de html para ejecución
SEO - la carga del head es menor

* DOM Document Object Model: 
js interactua con objetos, el conjunto de ellos forma el DOM 
Objeto window - Objeto padre para js (ver imagen en estructura)
todos los objetos contienen metodos y propiedades, metodos --> capacidades, propiedades --> como es? características
window. es omitible

Las variables en JS son del tipo de la información que contenga.

Conversión de tipo:
String a number:
- typeOf() --> devuelve el tipo del dato ingresado.
- Number() --> da el valor numerico equivalente del objeto pasado (null == 0)
- parseInt() --> a entero (capa decimales no redondea)
- parseFloat() --> al igual que Number respeta decimales.//No toma decisiones del tipo null == 0
- isNaN() --> devuelve true si no es numerico o false si el valor ingresado es numerico

Operadores:
Aritmeticos: 
    +       -       *       /       %
    Aritmeticos combinados:
    +=      -=      *=      /=

Comparativos / relacionales: conforman expresiones comparativas en booleano
>       >=      ==      ===     <=      <       !=      !==     nota:=== atiende al valor y al signo. Recomendado usar siempre

Lógicos: conforman expresiones comparativas entre booleano que resultan en booleano
&&      ||      !
and     or      NOT

Incremental / Decremental
++      --

Concatenación:
+

Asignación:
=

Prioridades de operadores: ver pdf

ESTRUCTURAS DE CONTROL:

    Condicionales:

    - If-else: 
        if(expresion){
            codigo
        } else {
            codigo
        }


condicional ternario: 
(expresion) ? accion si true : accion si false;

switch: es mas veloz que los if else pero es mas limitada. Evalua el valor de una variable entre una cantidad finita y limitada de casos 

Tips validacion:
* Que no entra un null: primero se determina que no este vacio, luego se trabaja con los valores convenientes 
* false, undefined, null, 0 "" cuando un condicional regresa algo diferente a estos valores es que entra al bloque de codigo

todo lo que va entre llaves se llama bloque

ALcance de una variable: Una variable tiene alcance (scope) a nivel de bloque

escalabilidad: facilidad para expandir las funcionalidades

Bucles: Estructuras de control que ejecutan instrucciones una y otra vez mientras se cumpla una condicional
    - for: for(1;2;3){
        instrucciones
    }
        1 - declaracion de contador
        2 - condicion de repeticion
        3- factor de incremento
    es recomendable por cuestiones de consumición de recursos el evitar declarar en lo posible variables dentro del Bucles
    la palabra clave "continue" dentro de un bloque omite el resto de iteraciones
    la palabra clave "break" aqui determina un abandono prematuro del bloque, haciendo caso omiso no solo del resto de instrucciones de la vuelta sino de las demas repeticiones

    -while: realiza instrucciones mientras se cumpla una condicion
    while (condicion){
        instrucciones
    }

Arrays: Objeto que permite almacenar una coleccion de valores.
imprimiendo el array como variable sin indice se imprimen todos los elementos separados por coma.

Nota: JS lee, procesa y luego ejecuta las funciones, por eso el uso se puede invocar una funcion y luego declararla
cuando una funcion que tiene parametros no se le envia argumentos en la invocacion, el valor es undefined

Nota: si una funcion no tiene configurado un retorno, por ejemplo un if sin else, esta retorna undefined, por lo que si se utiliza en un if 
ahorrarse el retorno de false.... ya de por si el UNDEFINED que retorna hace que no entre en el condicional


selectores y eventos:
    getElementById('Id') selecciona el elemento de acuerdo a su ID y devuelve 1 elemento solamente
    se puede tratar el id de forma nominal asi que document.getElementById("valorId").evento === valorId.evento
    getElementsByClassName(): devuelve un array con los elementos con la clase
    getElementsByTagName(): devuelve un array con los elementos con ese tag

    Los eventos se declaran en minusculas porque como se pueden utilizar tanto en el dom como en el script necesita ser case insensitive y de esta
    forma es reconocible tanto por el dom como por el script

    los eventos se traen (event catching) en 2 ocasiones:
        para anularlo 
        para obtener informacion de el


OBJETOS:
    objetos literales: su simbolo es la llave, tienen pares clave : valor... si un objeto no va a variar usar const (intuitivo segun su uso). Los objetos 
    nominales se dota de identificadores, hablamos de una propiedad cuando estamos ante un identificador cuyo valor es distinto a una funcion, cuando su valor es una funcion
    estamos ante un metodo.
    la propiedad puede ser getter (que obtiene el valor), o setter (actualizas asignandole un valor)

    los metodos a traves de THIS puede utilizar las demas propiedades o metodos del mismo objeto
    los identificadores pueden ser numericos, nominales y de String
    nominales: una palabra,
    numericos se acceden por notacion de corchete solamente
    de string: depende de la necesidad... por ejemplo si queremos que una propiedad se llame cli-ente (haria una resta) se utiliza "cli-ente"

AJAX y JSON

    AJAX: Capacidad de los navegadores de comunicarse con el servidor sin recarga de pagina 

        - Proceso:
            * se declara una variable xmlhttp = XMLHttpRequest()
            * 
    JSON: Formato de intercambio de datos (JavaScript Object Notation)
        - Solo tiene identificadores de strings-
        - Solo acepta comillas dobles
        - No tiene metodos
    
    en JS se parsea con JSON.parse("archivo.json") lo que lo convierte en un objeto utilizable

    serialize: funcion de jquery que toma los atributos name del formulario con un = y el valor, varios valores unidos por un &
    Objeto XHR -> Envio asincrono al servidor
    En firefox: red/XHR


    EXPRESIONES REGULARES
    / --> inicio y final de expresion
    hay 2 tipos: estricta (tiene que cumplirse a juro) y normales, las estrictas empiezan con /^ y cierran con $/
    \d -->digito
    \s -->caracter invisible
    \S -->caracter no invisible
    lo que se encierra entre llaves {5} indica cuantas veces debe repetirse el caracter, en este caso 5 asi que \d{5} significa un digito repetido 5 veces. si dentro de la llave se meten varios "bucles" se separan con coma
    caracteres especiales se escapan con \
    + --> se repite 1 o mas veces el simbolo anterior
    [] --> rango
    luego se ejecuta la funcion text(expresionAEvaluar)

    VALIDACION DE FORMULARIOS
    validacion nativa: la propia de html (required, tipo del input), pero es un hueco de seguridad, ya que por consola se puede quitar
    validacion on real time: responde a eventos, por ejemplo la de las contrseñas de minimo N caracteres que tiene un estilo hasta que se llega a cumplir la condicion
    validacion  en cliente y en servidor
    Consta de 4 pasos:
        1 - en html un formulario debe tener un atributo onsubmit, cuyo valor es la palabra clave return seguida de la invocacion de la funcion que retorna true si se quiere enviar,
        el primer paso es almacenar los valores en variables, comunmente con la propiedad.value
        2 - Comprobar la existencia de todos los valores, si falta 1 se retorna false
        3 - validacion especifica de cada dato, retornando false cuando se encuentre un dato invalido, esto se extendera con los criterios de validacion
        4 - retornar true una vez cumplidos los 3 pasos anteriores

    value - propiedad que almacena el valor del input

    ############OBJETO DATE#######################
    - los meses empiezan desde criterios
    - crear un objeto date sin parametros devuelve la feca actual en formato UTC 
    - Declaracion: new Date()

############# CONTROL DE MEDIOS #########################

############## ECMASCRIPT 6 #######################


Tipos de declaracion de variables: (ordenados de mayor a menor segun la memoria que ocupan)
-var >> No da error por lo que no se usará en la formacion, da lugar a redeclaraciones y otros errores
-let --> ECMA6 // mas estricta que var
-const --> ECMA6// constante, al igual que let es mas estricta, con diferencia que requiere asignación al declararse.

parametros rest: al asignarle un valor al parametro, este se convierte en un valor por defecto cuando no recibe dicho parametro function name(par=val_por_defecto)

############ PRACTICAS ###############################

Lote 1 para martes 5/12
Lote 2 para martes 12/12